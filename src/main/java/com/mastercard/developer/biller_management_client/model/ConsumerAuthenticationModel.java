/*
 * Bill Pay Exchange Biller Management API
 * Biller Management Service
 *
 * OpenAPI spec version: 1.0.0
 * Contact: Bill_Pay_Development_Support@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.biller_management_client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Consumer Authentication Model
 */
@ApiModel(description = "Consumer Authentication Model")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-01-30T10:30:57.815-06:00[America/Chicago]")
public class ConsumerAuthenticationModel {
  public static final String SERIALIZED_NAME_RECORD_ACTION = "recordAction";
  @SerializedName(SERIALIZED_NAME_RECORD_ACTION)
  private String recordAction;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CATEGORY_LABEL = "categoryLabel";
  @SerializedName(SERIALIZED_NAME_CATEGORY_LABEL)
  private String categoryLabel;

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_MAX_LENGTH = "maxLength";
  @SerializedName(SERIALIZED_NAME_MAX_LENGTH)
  private String maxLength;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public ConsumerAuthenticationModel recordAction(String recordAction) {
    this.recordAction = recordAction;
    return this;
  }

   /**
   * Record Action, avaliable values are: Add, Delete and Update, only required when Biller action is &#39;Update&#39;
   * @return recordAction
  **/
  @ApiModelProperty(example = "Add", value = "Record Action, avaliable values are: Add, Delete and Update, only required when Biller action is 'Update'")
  public String getRecordAction() {
    return recordAction;
  }

  public void setRecordAction(String recordAction) {
    this.recordAction = recordAction;
  }

  public ConsumerAuthenticationModel category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Category Code, avaliable values are: IDEN, EMAL, PHON, CODE, ADDR, OTHR
   * @return category
  **/
  @ApiModelProperty(example = "IDEN", required = true, value = "Category Code, avaliable values are: IDEN, EMAL, PHON, CODE, ADDR, OTHR")
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public ConsumerAuthenticationModel categoryLabel(String categoryLabel) {
    this.categoryLabel = categoryLabel;
    return this;
  }

   /**
   * Category Label, max length 128 characters
   * @return categoryLabel
  **/
  @ApiModelProperty(example = "Iden Label", required = true, value = "Category Label, max length 128 characters")
  public String getCategoryLabel() {
    return categoryLabel;
  }

  public void setCategoryLabel(String categoryLabel) {
    this.categoryLabel = categoryLabel;
  }

  public ConsumerAuthenticationModel dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Consumer Authentication Data Type, avaliable values are: A, P, B, N, S, C, D
   * @return dataType
  **/
  @ApiModelProperty(example = "A", required = true, value = "Consumer Authentication Data Type, avaliable values are: A, P, B, N, S, C, D")
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }

  public ConsumerAuthenticationModel maxLength(String maxLength) {
    this.maxLength = maxLength;
    return this;
  }

   /**
   * Consumer Authentication Maximum length, max length 3 numeric value
   * @return maxLength
  **/
  @ApiModelProperty(example = "2", required = true, value = "Consumer Authentication Maximum length, max length 3 numeric value")
  public String getMaxLength() {
    return maxLength;
  }

  public void setMaxLength(String maxLength) {
    this.maxLength = maxLength;
  }

  public ConsumerAuthenticationModel notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Notes text, max length 1000 characters
   * @return notes
  **/
  @ApiModelProperty(example = "Max length 2 for IDEN category", required = true, value = "Notes text, max length 1000 characters")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsumerAuthenticationModel consumerAuthenticationModel = (ConsumerAuthenticationModel) o;
    return Objects.equals(this.recordAction, consumerAuthenticationModel.recordAction) &&
        Objects.equals(this.category, consumerAuthenticationModel.category) &&
        Objects.equals(this.categoryLabel, consumerAuthenticationModel.categoryLabel) &&
        Objects.equals(this.dataType, consumerAuthenticationModel.dataType) &&
        Objects.equals(this.maxLength, consumerAuthenticationModel.maxLength) &&
        Objects.equals(this.notes, consumerAuthenticationModel.notes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordAction, category, categoryLabel, dataType, maxLength, notes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsumerAuthenticationModel {\n");

    sb.append("    recordAction: ").append(toIndentedString(recordAction)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    categoryLabel: ").append(toIndentedString(categoryLabel)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

